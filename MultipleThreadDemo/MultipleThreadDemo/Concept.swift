//
//  Concept.swift
//  MultipleThreadDemo
//
//  Created by roni on 2018/2/7.
//  Copyright © 2018年 roni. All rights reserved.
//

import Foundation

// [iOS 并发编程之 Operation Queues](http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/)

/**
 * ## 进程
 * 一个正在运行的可执行文件
 * 拥有独立的虚拟内存空间 and 系统资源 and 端口权限等
 * 至少包含一条主线程 和 任意数量的辅助线程, 主线程退出了,进程也跟着结束
 */

/**
 * ## 线程
 * 一个独立的代码执行路径,是代码执行路径的最小分支
 */

/**
 * ## 任务
 * 一个代码块
 */

/**
 * ## 串行与并行
 * 串行: 一次只允许执行一个任务, 任务2 必须等待 任务1 执行结束才能执行
 * 并行: 一次允许执行多个任务, 具体多少个少系统资源限制
 */

/**
 * ## 同步与异步 => 区别是 是否需要等待
 * 同步: 需要等待操作执行才能执行接下来的代码, 阻塞当前线程, 不开辟新线程
 * 异步: 调用后立即返回, 不等待执行结果, 会开辟新的线程, 受任务多少和系统资源限制
 */

/**
 * ## 队列 与 线程
 * iOS 中通过队列进行任务调度
 * 系统会根据调度的任务需要和当前负载创建和销毁线程, 不需要工程师手动管理
 */

/**
 * ## 直接使用线程(thread)的场景 
 * 1. 用线程以外的其他方式都实现不了我们的特定任务
 * 2. 必须实时执行一个任务,因为虽然队列会尽可能快地执行我们提交的任务，但是并不能保证实时性
 * 3. 你需要对在后台执行的任务有更多的可预测行为
 */

// pthread -> thread -> gcd -> operation (从低到高)



